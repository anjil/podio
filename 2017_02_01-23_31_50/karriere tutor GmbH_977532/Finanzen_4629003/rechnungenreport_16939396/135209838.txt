label: Calculation
field_id: 135209838
type: calculation
script: var json       = @[All of JSON-Rechnungen](in_132148137_132049808)||[];
var jsExpTR    = @[All of JSON-Erwartete-Zahlungseingange](in_125563047_132230279)||[];
var jsExpLZ    = @[All of JSON-RechnungenReport](in_132709250_132703747)||[];
var bnkAmt     = @[Banking Amount](field_132049710)||0;
var showExpLz  = @[ Show Expected License ](field_134819905)   ||'';
var oData      = '';
var oShow      = '';
var oBalance   = bnkAmt;
var oHeader ='|**Name**|**Date**|**Amount**|**Balance**|<br>';
oHeader +='|--------|--------:|----------:|-----------:|<br>';

var t='~~~'
var ExpBnkArr  = [];
var unqDateArr = [];

try{   
   var myArray = getData(json);
   printData1(myArray);  
   
  
}catch (e) {
  "Could not parse JSON";
}

function printData1(myArray){       
  
  myArray.sort(function(a, b) {
    a = new Date(a['Date']);
    b = new Date(b['Date']);
    return a < b ? -1 : (a > b ? 1 : 0);
  });

  var startDate = new Date(myArray[0]['Date']); 

  if(jsExpTR && jsExpTR!='{}' && jsExpTR!='[]'){
    for(var i=0; i<jsExpTR.length; i++){
      if(jsExpTR[i] && jsExpTR[i]!='{}' && jsExpTR[i]!='[]'){
        var js            = JSON.parse(jsExpTR[i]);  
        var trPaid        = js.TransactionPaid;     
        if(trPaid.trim() == 'n' && js.Date){ 
          var setD       = getWeekStart(js.Date);              
          var exAmt      = js.Amount||0; 
          var tk         = setD.getTime();
          if(ExpBnkArr[tk]){
            var ar          = ExpBnkArr[tk];
            var arAmt       = parseFloat(ar['Amount']);
            arAmt          += exAmt;
            ar['Amount']    = arAmt
            ExpBnkArr[tk]   = ar;
          }
          else{
            var exAr        = {};
            exAr['Name']    = js.Name;
            exAr['Amount']  = exAmt; 
            exAr['Date']    = setD;
            exAr['Week']    = parseInt(getWeekNumber(setD));
            exAr['Year']    = setD.getFullYear();
            exAr['id']      = ''; 
            exAr['Tag']     = 'Bank';  
            ExpBnkArr[tk]   = exAr;
            exAr            = {}; 
                   
            if(unqDateArr.indexOf(setD) < 0){
              unqDateArr.push(setD);  
            }            
          }                      
        }    
      }
    } 
  }


  var tuples = [];
  for (var key in ExpBnkArr) tuples.push([key, ExpBnkArr[key]]);
   
  tuples.sort(function(a, b) {
    a = new Date(a['Date']);
    b = new Date(b['Date']);
    return a < b ? -1 : (a > b ? 1 : 0);
  });
  
  
  unqDateArr.sort(function(a, b) {   
    a = new Date(a);
    b = new Date(b);
    return a < b ? -1 : (a > b ? 1 : 0);
  });


  var oldDate = null;
  for(var u=0; u<unqDateArr.length; u++){ 
    var oDate = unqDateArr[u];  
    if((!oldDate || oldDate.getTime() < oDate.getTime()) && 
     oDate.getTime() >= startDate.getTime()){
       oldDate   = oDate;        
       for (var k=0; k<tuples.length; k++) {
         var oTKey    = tuples[k][0];  
         var oTVal    = tuples[k][1];
         var expDate  = new Date(oTVal['Date']);  

         if(expDate.getTime() == oDate.getTime()){ 
           var shwDt  = moment(expDate).format("DD.MM.YYYY");    
           var oEAmt  = oTVal['Amount'];
           if(oEAmt > 0){
             oBalance  = oBalance + oEAmt;
             var shAmt = '+'+currencyFormatDE(oEAmt); 
             var shBal = currencyFormatDE(oBalance);
             oData    += '|';
             oData    += 'Expected banking amount'  +'|';
             oData    += shwDt   +'|';
             oData    += shAmt   +'|'; 
             oData    += shBal   +'|<br>'; 
             break;
           }
         }
       }

       for(var i=0; i<myArray.length; i++){                   
         var oName    = myArray[i]['Name'];
         var oAmt     = myArray[i]['Amount'];
         var mDate    = myArray[i]['Date'];
         var oWeek    = myArray[i]['Week'];
         var oYear    = myArray[i]['Year'];
         var oTag     = myArray[i]['Tag'];
         var oid      = myArray[i]['id']; 
         if(oName){
           if(oName.length>45){
             oName = oName.substring(0,45);
           }
         }
         if(mDate){ t+='****'
           var odts = new Date(mDate);
           if(odts.getTime == oDate.getTime()){
             if(oTag == 'Lic'){
               var oChkDate = dateCompair(mDate); 
               if(oChkDate == 1){
                 var sAmt = 0; 
                 var sBal = 0;
                 var setD = null;
                 var shwDt= null;
                 oBalance = oBalance - oAmt;  

                 sAmt     = '-'+currencyFormatDE(oAmt); 
                 sBal     = currencyFormatDE(oBalance);
                 setD     = mDate
                 shwDt    = moment(setD).format("DD.MM.YY");

                 oData   += '|';
                 oData   += oName             +'|';
                 oData   += shwDt             +'|';
                 oData   += sAmt              +'|'; 
                oData   += sBal              +'|<br>';             
               }           
             } 

             if(oTag == 'Bill'){
               var oChkDate = dateCompairBill(mDate); 
               if(oChkDate == 1){
                 var sAmt = 0; 
                 var sBal = 0;
                 var setD = null;
                 var shwDt= null;
                 oBalance = oBalance - oAmt;  

                 sAmt     = '-'+currencyFormatDE(oAmt); 
                 sBal     = currencyFormatDE(oBalance);
                 setD     = mDate
                 shwDt    = moment(setD).format("DD.MM.YY");
                 var oUrl = 'https://podio.com/karrieretutorde/finance/apps/rechnungen/items/'+oid;

                 oData   += '|';
                 oData   += oName.link(oUrl)  +'|';
                 oData   += shwDt             +'|';
                 oData   += sAmt              +'|'; 
                 oData   += sBal              +'|<br>';             
               }          
             } 
           }
         }
       }
     }  
   }
 }


function getData(json){
  var tempArr     = [];
  var arr         = {};
  var ind         = 0;
  if(json && json!='{}' && json!='[]'){
    for(var i=0; i<json.length; i++){
      if(json[i] && json[i]!='{}' && json[i]!='[]'){
        var js           = JSON.parse(json[i]);
        for(var k=0; k<js.length; k++){  
          var disJson    = 1;
          var bezahlt    = js[k].bezahlt;  
          if(js[k].Date){
            if(bezahlt){
              if(bezahlt == 'Bezahlt') disJson = 0;
              if(bezahlt == 'Offen')   disJson = 1;
            }
            var chkDisplay = checkForDispalyData(disJson, 
                                                 js[k].Date,
                                                 js[k].PayDate);
            if(chkDisplay == 1){       
              var odts       = new Date(js[k].Date);
              var currDts    = new Date();          
              arr['Name']    = js[k].Name;
              arr['Amount']  = js[k].Amount; 
              if(currDts.getTime() > odts.getTime()){
                var setD     = getWeekStart(currDts);   
                arr['Date']  = setD;  
                arr['Week']  = parseInt(getWeekNumber(setD));
                arr['Year']  = setD.getFullYear();  
                if(unqDateArr.indexOf(setD) < 0){
                  unqDateArr.push(setD);  
                }       
              }
              else{
                var setD     = getWeekStart(odts);  
                arr['Date']  = setD; 
                arr['Week']  = parseInt(getWeekNumber(setD));
                arr['Year']  = setD.getFullYear();
                if(unqDateArr.indexOf(setD) < 0){ 
                  unqDateArr.push(setD);  
                }  
              }
              arr['id']      = js[k].id; 
              arr['Tag']     = 'Bill';          
              tempArr[ind]   = arr;
              arr            = {}; 
              ind++;  
            }
          }     
        }
      } 
    }
  }

  if(showExpLz == '' || showExpLz == 'On'){
    if(jsExpLZ && jsExpLZ!='{}' && jsExpLZ!='[]'){
      var tArr = Array();
      for(var i=0; i<jsExpLZ.length; i++){
        if(jsExpLZ[i] && jsExpLZ[i]!='{}' && jsExpLZ[i]!='[]'){
          var js           = JSON.parse(jsExpLZ[i]); 
          var licAmt       = js.Amount  || 0 ;
          var Lizenze      = js.Lizenze || '';
          var Rate         = js.Rate    || '';
          if(js.Date){
            if(Lizenze!='' || Rate!=''){
              var oName        = js.Lizenzen+' : '+js.Rate;
              var dt           = new Date(js.Date); 
              var tKey         = js.Lizenzen+'^'+js.Rate+'^'+dt.getTime();     

              if(tArr[tKey]){           
                var z         = tArr[tKey]; 
                z['Amount']   = parseFloat(z['Amount'])+parseFloat(licAmt);
                tArr['Amount']= z;
              } 
              else{  
                var z        = [];
                z['Name']    = oName; 
                z['Amount']  = js.Amount; 
                z['Date']    = new Date(js.Date);          
                tArr[tKey]   = z;
              }
            }   
          }
        }
      }
      if(tArr){
        var tuples = [];
        for (var key in tArr) tuples.push([key, tArr[key]]); 
          for (var i = 0; i < tuples.length; i++) { 
            var oTKey      = tuples[i][0];   
            var oTVal      = tuples[i][1]; 
            var setD       = getWeekStart(oTVal['Date']);   
            arr['Name']    = oTVal['Name']; 
            arr['Amount']  = parseFloat(oTVal['Amount'])||0;  
            arr['Date']    = setD;
            arr['Week']    = parseInt(getWeekNumber(setD));
            arr['Year']    = setD.getFullYear();
            arr['id']      = ''; 
            arr['Tag']     = 'Lic';          
            tempArr[ind]   = arr;
            arr            = {}; 
            ind++;   
            if(unqDateArr.indexOf(setD) < 0){
              unqDateArr.push(setD);  
            } 
          }
        } 
      }
    }  
  return tempArr;   
}


function getWeekNumber(t) {
  var date = new Date(t.getTime());
   date.setHours(0, 0, 0, 0);
 
  date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7);
 
  var week1 = new Date(date.getFullYear(), 0, 4);
 
  return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000- 3 + (week1.getDay() + 6) % 7) / 7);
}


function checkForDispalyData(pStatus, oE, pDate){
  if(pStatus == 1){
    return 1;
  }
  else{
    var d1 = new Date(oE);
    var d3 = (pDate) ? new Date(pDate) : new Date();
    if (d1.getTime()< d3.getTime()) {
      return 0;
    }   
    else{
      return 1;
    }
  }   
}


function currencyFormatDE(num) {
    return num
       .toFixed(2)
       .replace(".", ",") 
       .replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1.") + " €"; 
}

function getWeekStart(d){
  var odt       = new Date(d);
  var odays     = 0;
  if(odt.getDay()==0) odays = 1;
  if(odt.getDay()==6) odays = 2;
  
  odt.setDate(odt.getDate() + (odays)); 
  return odt;
}

function dateCompairBill(oE){
  var d1 = new Date(oE); 
  var d3 = new Date();
  d3.setDate(d3.getDate() + 42);
  if (d1.getTime()<= d3.getTime()) {
    return 1;
  }   
  else{
    return 0;
  }
}


function dateCompair(oE){
  var d1 = new Date(oE); 
  var d2 = new Date();
  var d3 = new Date();
  d3.setDate(d3.getDate() + 42);
  if (d1.getTime()>= d2.getTime() && d1.getTime()<= d3.getTime()) {
    return 1;
  }   
  else{
    return 0;
  }
}

oShow = oHeader+oData+t
